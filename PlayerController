using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class PlayerController : MonoBehaviour, IPointerDownHandler, IPointerUpHandler //Ipointer for the Mobile Controlls
{
    //Player Settings

    [Header("Player Settings")]

    [SerializeField] private float movementSpeed = 5;
    [SerializeField] private float sprintSpeed = 8;
    [SerializeField] private float jumpForce = 11;
    [SerializeField] private float gravityScale = 2;

    [Space(10)]

    //Camera Settings

    [Header("Camera Settings")]

    [Range(0.05f, 1)][SerializeField] private float smoothTime;

    [SerializeField] private int maxSpeed;

    private Rigidbody2D rb2D;

    [SerializeField] private Transform groundedPoint;

    [SerializeField] private float fallThreshhold = 10;

    private float lastCollisionPosY;
    private bool dead = false;

    private Vector3 velocity;

    private void Awake()
    {
        Application.targetFrameRate = 60;

        lastCollisionPosY = -int.MaxValue;
        rb2D = GetComponent<Rigidbody2D>();
    }

    private void Update()
    {
        DeathDetection();

        rb2D.gravityScale = gravityScale;

        //Movement(); PC Movement

        Move(curInput);
    }

    private void FixedUpdate()
    {
        CameraController();
    }

    private void CameraController()
    {
        Vector3 targetPos = new Vector3(transform.position.x, transform.position.y, Camera.main.transform.position.z);
        Camera.main.transform.position = Vector3.SmoothDamp(Camera.main.transform.position, targetPos, ref velocity, smoothTime, maxSpeed);
    }

    private void DeathDetection()
    {
        if (transform.position.y < (lastCollisionPosY - fallThreshhold) && !dead)
            OnDeath();
    }

    private void OnDeath()
    {
        dead = true;
        SceneManager.LoadScene(SceneManager.GetActiveScene().buildIndex);
    }

    private void Movement() // For PC
    {
        float input = Input.GetAxisRaw("Horizontal");

        rb2D.velocity = new Vector2(input * (Input.GetKey(KeyCode.LeftShift) ? sprintSpeed : movementSpeed), rb2D.velocity.y);

        if (Input.GetKeyDown(KeyCode.Space))
            Jump();
    }

    private float curInput;

    public void OnPointerDown(PointerEventData eventData)
    {
        if (eventData.pointerEnter.gameObject.name == "Left")
            curInput = -1;

        else
             if (eventData.pointerEnter.gameObject.name == "Right")
            curInput = 1;

        else
            curInput = 0;
    }

    public void OnPointerUp(PointerEventData eventData)
    {
        curInput = 0;
    }

    private void Move(float input) // For Mobile / Android
    {
        rb2D.velocity = new Vector2(input * (Input.GetKey(KeyCode.LeftShift) ? sprintSpeed : movementSpeed), rb2D.velocity.y);
    }

    private bool isGrounded() => Physics2D.OverlapBox(groundedPoint.position, groundedPoint.localScale, 0, LayerMask.GetMask("Ground"));

    public void Jump()
    {
        if(isGrounded())
        rb2D.velocity = new Vector2(rb2D.velocity.x, jumpForce);
    }

    private void OnCollisionEnter2D(Collision2D collision)
    {
        if (collision.collider.CompareTag("Falling"))
            StartCoroutine(WaitForFall(collision.gameObject));

        lastCollisionPosY = collision.transform.position.y;
    }

    private IEnumerator WaitForFall(GameObject gameObject)
    {
        yield return new WaitForSeconds(0.2f);
        gameObject.GetComponent<Rigidbody2D>().isKinematic = false;
    }

    private void OnDrawGizmos()
    {
        Gizmos.color = Color.red;
        Gizmos.DrawWireCube(groundedPoint.position, groundedPoint.localScale);
    }
}
